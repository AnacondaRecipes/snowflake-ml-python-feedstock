diff --git a/third_party/rules_conda/conda.bzl b/third_party/rules_conda/conda.bzl
index 3e85b21..f795c9c 100644
--- a/third_party/rules_conda/conda.bzl
+++ b/third_party/rules_conda/conda.bzl
@@ -83,7 +83,10 @@ def _install_conda(rctx, installer):
     # any activated conda environment would not affect the installer.
     # Also, since the installer writes to $HOME which breaks hermecity, we make it
     # write to the repo dir.
-    args = ["env", "-i", "HOME={}".format(rctx.attr.conda_dir), "PATH={}".format(path_envar), rctx.path(installer)] + installer_flags
+    if os == "Windows":
+        args = [rctx.path(installer)] + installer_flags
+    else:
+        args = ["env", "-i", "HOME={}".format(rctx.attr.conda_dir), "PATH={}".format(path_envar), rctx.path(installer)] + installer_flags
 
     # execute installer with flags adjusted to OS
     if os == "Windows":
diff --git a/third_party/rules_conda/env.bzl b/third_party/rules_conda/env.bzl
index 8203a27..35688d8 100644
--- a/third_party/rules_conda/env.bzl
+++ b/third_party/rules_conda/env.bzl
@@ -28,19 +28,23 @@ def _conda_cmd(rctx, conda_args, environment = {}):
         rctx.attr.conda_dir,
         CONDA_EXT_MAP[get_os(rctx)],
     ))
-    python = Label("@{}//:{}/bin/python".format(
-        rctx.attr.conda_repo,
-        rctx.attr.conda_dir,
-    ))
-    actual_environment = {"PATH": "{}:{}".format(rctx.path(python).dirname, path_envar)}
-    actual_environment.update(environment)
-    environment_args = ["{}={}".format(env, val) for env, val in actual_environment.items()]
+    os=get_os(rctx)
+    if os == "Windows":
+        python = Label("@{}//:{}/python.exe".format(
+            rctx.attr.conda_repo,
+            rctx.attr.conda_dir,
+        ))
+    else:
+        python = Label("@{}//:{}/bin/python".format(
+            rctx.attr.conda_repo,
+            rctx.attr.conda_dir,
+        ))
 
     return rctx.execute(
         # all environment variables are stripped. PATH and environment variables passed in are
         # added above. this is to prevent the conda_entrypoint from recognizing the conda
         # environment (if any) where bazel was invoked.
-        ["env", "-i"] + environment_args + [conda_entrypoint] + conda_args,
+        [conda_entrypoint] + conda_args,
         quiet = rctx.attr.quiet,
         timeout = rctx.attr.timeout,
     )
@@ -63,7 +67,8 @@ def _update_environment(rctx, env_name, env_file):
     rctx.report_progress("Updating empty conda environment to populate it")
     result = _conda_cmd(
         rctx,
-        ["env", "update", "--solver", "libmamba", "-f", env_file, "-p", "./{}".format(env_name)],
+        # ["env", "update", "--solver", "libmamba", "-f", env_file, "-p", "./{}".format(env_name)],
+        ["env", "update", "-f", env_file, "-p", "./{}".format(env_name)],
         environment = {"MAMBA_USE_LOCKFILES": "false"},
     )
     if result.return_code:
diff --git a/WORKSPACE b/WORKSPACE
index f46f843..9368577 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -54,7 +54,7 @@ register_yq_toolchains()
 load_conda(conda_repo_name = "snowflake_conda", quiet = True)
 
 conda_create(
-    name = "py3_env_snowflake_conda_only",
+    name = "p3esco",
     conda_repo_name = "snowflake_conda",
     timeout = 3600,
     clean = False,
@@ -65,15 +65,15 @@ conda_create(
 
 register_toolchain(
     name = "py3_env_snowflake_conda_only_repo",
-    env = "py3_env_snowflake_conda_only",
+    env = "p3esco",
     target_compatible_with=["@SnowML//bazel/platforms:snowflake_conda_channel"],
-    toolchain_name = "py3_toolchain_snowflake_conda_only",
+    toolchain_name = "p3tsco",
 )
 
 load_conda(conda_repo_name = "extended_conda", quiet = True)
 
 conda_create(
-    name = "py3_env_extended_channels",
+    name = "p3eec",
     conda_repo_name = "extended_conda",
     timeout = 3600,
     clean = False,
@@ -84,7 +84,7 @@ conda_create(
 
 register_toolchain(
     name = "py3_env_extended_channels_repo",
-    env = "py3_env_extended_channels",
+    env = "p3eec",
     target_compatible_with=["@SnowML//bazel/platforms:extended_conda_channels"],
-    toolchain_name = "py3_toolchain_extended_channels",
+    toolchain_name = "p3tec",
 )
diff --git a/codegen/estimator_autogen_tool.py b/codegen/estimator_autogen_tool.py
index 4d5b3d7..dbb6e9f 100644
--- a/codegen/estimator_autogen_tool.py
+++ b/codegen/estimator_autogen_tool.py
@@ -72,7 +72,7 @@ def main(argv: List[str]) -> None:
         expected_suffix = AutogenTool.module_root_dir(module_name=FLAGS.module)
         expected_suffix = os.path.normpath(os.path.join(actual_output_path, expected_suffix))

-        bazel_out_dir = FLAGS.bazel_out_dir
+        bazel_out_dir = os.path.normpath(FLAGS.bazel_out_dir)
         if not bazel_out_dir.endswith(expected_suffix):
             raise AssertionError(
                 f"genrule output dir $(RULEDIR) {bazel_out_dir} is expected to end with suffix {expected_suffix}"
diff --git a/codegen/sklearn_wrapper_template.py_template b/codegen/sklearn_wrapper_template.py_template
index d66de0a..19c7665 100644
--- a/codegen/sklearn_wrapper_template.py_template
+++ b/codegen/sklearn_wrapper_template.py_template
@@ -127,9 +127,6 @@ def _validate_sklearn_args(args: Dict[str, Any], klass: type) -> Dict[str, Any]:


 class {transform.original_class_name}(BaseTransformer):
-    r"""{transform.estimator_class_docstring}
-    """
-
     def __init__(
         {transform.estimator_init_signature}
     ) -> None:
