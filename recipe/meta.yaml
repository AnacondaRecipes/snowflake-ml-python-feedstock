{% set name = "snowflake-ml-python" %}
{% set version = "1.7.4" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/snowflakedb/{{ name }}/archive/refs/tags/{{ version }}.tar.gz
  sha256: 3e15f49e2a4c796f85a917bac480ff5086b2cc8695e08f481260bf3901193d52

build:
  # The build number of this package should always start from 100
  # for new versions. For more information ask the CODEOWNERS.
  number: 100
  skip: True # [py<39 or py>311]
  # bazel not available on s390x
  skip: True # [s390x]

# It is sufficient to look at [requirements.yml](https://github.com/snowflakedb/snowflake-ml-python/blob/main/requirements.yml) and update
# the `run` and `run_constrained` section accordingly.
#
# `version_requirements` or `version_requirements_conda` -> `run`
# (`version_requirements` or `version_requirements_conda`) and `requirements_extra_tags` -> `run_constrained`
#
# This meta.yaml is up-to-date for defining `run` and `run_constrained` dependencies,
# therefore it can be used to double check the runtime dependencies or as a starting point:
# https://github.com/snowflakedb/snowflake-ml-python/blob/main/ci/conda_recipe/meta.yaml
#
# Snowflake marks the optional dependency with the use of the `requirements_extra_tags` tag. The tags refer to models used within *snowflake-ml*
# which the user may or may not want to use together with the *snowflake* platform. They explained that because they control the environment and
# features of the platform, it is not necessary to pull those extra requirements in the `run` section. It is ok to leave them in the
# `run_constrained` section.
requirements:
  build:
    # For win, git is installed on our runners.
    # To run a local build, use m2-git or have git installed.
    - git         # [not win]
    # Bazel has rules to run Miniconda to build the package so make sure that the Miniconda and conda-libmamba-solver versions are correct, 
    # because it can affect the build process, see https://github.com/snowflakedb/snowflake-ml-python/blob/main/third_party/rules_conda/conda.bzl
    # upstream uses ==6.3.x but we have 6.2.0 or 6.5.0
    - bazel 6.5.0
    - {{ compiler('c') }}
  host:
    - python
    - pip
    - setuptools >=61.0
    - wheel
  run:
    - python
    - absl-py >=0.15,<2
    # For fsspec[http] in conda
    - aiohttp !=4.0.0a0,!=4.0.0a1
    - anyio >=3.5.0,<5
    - cachetools >=3.1.1,<6
    - cloudpickle >=2.0.0
    - cryptography
    - fsspec >=2024.6.1,<2026
    - importlib_resources >=6.1.1,<7
    - numpy >=1.23,<2
    - packaging >=20.9,<25
    - pandas >=1.0.0,<3
    - pyarrow
    - pyjwt >=2.0.0,<3
    - pytimeparse >=1.1.8,<2
    - pyyaml >=6.0,<7
    # requests is an extra dependency for fsspec[http]
    - requests
    - retrying >=1.3.3,<2
    - s3fs >=2024.6.1,<2026
    - scikit-learn >=1.4,<1.6
    - scipy >=1.9,<2
    - snowflake-connector-python >=3.5.0,<4
    - snowflake-snowpark-python >=1.17.0,<2,!=1.26.0
    - sqlparse >=0.4,<1
    - typing-extensions >=4.1.0,<5
    - xgboost >=1.7.3,<3
  run_constrained:
    - catboost >=1.2.0,<2
    - lightgbm >=4.1.0,<5
    - mlflow >=2.16.0,<3
    - pytorch >=2.0.1,<2.3.0
    - sentence-transformers >=2.2.2,<3
    - sentencepiece >=0.1.95,<1
    - shap >=0.46.0,<1
    - tensorflow >=2.12.0,<3
    - tokenizers >=0.10,<1
    - torchdata >=0.4,<1
    - transformers >=4.32.1,<5
    - huggingface_hub <0.26

test:
  imports:
    - snowflake.ml
    - snowflake.ml.fileset
    - snowflake.ml.model
    - snowflake.ml.modeling
    - snowflake.ml.registry
    - snowflake.ml.utils
    - snowflake.cortex
  commands:
    - pip check
    # check that pip gets the correct version
    - python -c "from importlib.metadata import version; assert(version('{{ name }}')=='{{ version }}')"
  requires:
    - pip

about:
  home: https://github.com/snowflakedb/snowflake-ml-python
  summary: Snowflake machine learning library.
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE.txt
  description: |
    The machine learning client library that is used for interacting with Snowflake
    to build machine learning solutions. Functionalities include model uploading,
    training, feature engineering, etc.
  dev_url: https://github.com/snowflakedb/snowflake-ml-python
  doc_url: https://docs.snowflake.com/developer-guide/snowflake-ml/overview

extra:
  recipe-maintainers:
    - sumit0190
